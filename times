#! /usr/bin/ruby

require 'entry_table_view.rb'

# require AR
require 'rubygems'
require 'active_record'
require 'active_record/dirty.rb'

# connect to the database
ActiveRecord::Base.establish_connection({
  :adapter  => 'postgresql',
  :database => ARGV[1] || 'times',
  :host => ARGV[2] || 'localhost',
  :username => 'panic',
  :password => ''
})

puts "using database #{ActiveRecord::Base.connection.raw_connection.db}"

class Entry < ActiveRecord::Base
  include ActiveRecord::Dirty
  belongs_to :invoice
  belongs_to :activity
  belongs_to :project
end

class Project < ActiveRecord::Base
  include ActiveRecord::Dirty
  has_many :entries
end

class Activity < ActiveRecord::Base
  include ActiveRecord::Dirty
  has_many :entries
end

class Invoice < ActiveRecord::Base
  include ActiveRecord::Dirty
  has_many :entries
end

table_name = ARGV[0] || 'entries'

app = Qt::Application.new( ARGV )

def entries
  EntryTableView.new( Entry ).create_model do |t|
    t.plain       :date, :sample => '28-Dec-08'
    t.relational  :invoice, 'invoice_number', :sample => 'WWW000', :conditions => "status = 'not sent'", :order => 'invoice_number'
    t.relational  :project, 'project', :sample => 'Some Project', :conditions => 'active = true', :order => 'lower(project)'
    t.plain       :start, :sample => '00:00'
    t.plain       :end, :sample => '00:00'
    t.plain       :description, :sample => 'This is a long string designed to hold lots of data and description'
    t.relational  :activity, 'activity', :order => 'lower(activity)', :sample => 'Troubleshooting'
    t.distinct    :module, :sample => 'Doing Stuff'
    t.plain       :charge, :sample => 'Charge'
    t.distinct    :person, :sample => 'Leilani'
    
    t.collection = Entry.find( :all, :order => 'date, start, id' )
  end
end

def invoices
  EntryTableView.new( Invoice ).create_model do |t|
    t.plain :date
    t.plain :client
    t.plain :invoice_number
    t.distinct :status
    t.plain :billing
    t.plain :quote_date
    t.plain :quote_amount
    t.plain :description
    
    t.collection = Invoice.find( :all, :order => 'invoice_number' )
  end
end

def projects
  EntryTableView.new( Project ).create_model do |t|
    t.plain :project
    t.plain :description
    t.plain :client
    t.plain :rate
    t.plain :active
    
    t.collection = Project.find( :all, :order => 'id' )
  end
end

# must be one of the preceding function calls, or the eval will fail
table = eval( "#{table_name}()" )

table.minimum_width = 600
table.show

begin
  app.exec
rescue Exception => e
  puts e.backtrace.join( "\n" )
  puts e.message
end
