#! /usr/bin/ruby

require 'Qt4'
require 'entry_table_model.rb'
require 'delegates.rb'
require 'entry_table_view.rb'

# require AR
require 'rubygems'
require 'active_record'
require 'active_record/dirty.rb'

# connect to the database
ActiveRecord::Base.establish_connection({
  :adapter  => 'postgresql',
  :database => 'accounts',
  :username => 'accounts',
  :password => ''
})

class Account < ActiveRecord::Base
  # Actually, it isn't this that's causing the currval error
  include ActiveRecord::Dirty
  belongs_to :invoice
  belongs_to :activity
  belongs_to :project
end

class Project < ActiveRecord::Base
  has_many :entries
end

class Activity < ActiveRecord::Base
  has_many :entries
end

class Invoice < ActiveRecord::Base
  has_many :entries
end

# last 100 entries in table
entries = Entry.find(
  :all,
  :order => 'id desc'
  #~ :limit => 100
)
entries.reverse!

app = Qt::Application.new( ARGV )

table = EntryTableView.new
table.model = EntryTableModel.new(
  entries,
  %w{date invoice.invoice_number project.project start end description activity.activity module charge person}
)

# fetch list from related tables
table.relational_delegate( :invoice, :conditions => "status = 'not sent'", :order => 'invoice_number' )
table.relational_delegate( :project, :conditions => "active = true", :order => 'lower(project)' )
table.relational_delegate( :activity, :order => 'lower(activity)' )

# fetch list from column
table.delegate( :person, DistinctDelegate )
table.delegate( :module, DistinctDelegate )

table.showMaximized
#~ table.show

begin
  app.exec
rescue Exception => e
  puts e.backtrace.join( "\n" )
  puts e.message
end
