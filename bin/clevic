#! /usr/bin/ruby

require 'pathname'

require 'optparse'

$options = {}
oparser = OptionParser.new
oparser.banner = <<BANNER
Usage: #{File.basename($0)} [options] model_definition_file

model_definition_file, \#{model_definition_file}_models.rb will be searched for.

Options are:
BANNER
oparser.separator ''

oparser.on( '-H', '--host HOST', 'RDBMS host', String ) { |o| $options[:host] = o }
oparser.on( '-u', '--user USERNAME', String ) { |o| $options[:username] = o }
oparser.on( '-p', '--pass PASSWORD', String ) { |o| $options[:password] = o }
oparser.on( '-P', '--profile PROFILE', String ) { |o| $options[:profile] = o }
oparser.on( '-t', '--table TABLE', 'Table to display', String ) { |o| $options[:table] = o }
oparser.on( '-d', '--database DATABASE', 'Database name', String ) { |o| $options[:database] = o }

oparser.on( '-s', '--swing', 'Use JRuby Swing' ) { |o| require 'clevic/swing.rb' }
require 'clevic/swing.rb'
oparser.on( '-q', '--qt', 'Use Qt-Ruby' ) { |o| require 'clevic/qt.rb' }

oparser.on( '-D', '--debug' ) { |o| $options[:debug] = true }
oparser.on( '-v', '--verbose' ) { |o| $options[:verbose] = true }
oparser.on( '-V', '--version' ) do
  require 'clevic/version.rb'
  puts "clevic-#{Clevic::VERSION::STRING}"
  exit 0
end
oparser.on( '-h', '-?', '--help' ) do |o|
  puts oparser.to_s
  exit( 1 )
end

args = oparser.parse( ARGV )

if $options[:debug]
  require 'pp'
  pp $options
end

unless $options[:verbose]
  # turn off "Object#type deprecated" messages
  # and anything else output by rb_warn
  $VERBOSE = nil
end

class Pathname
  # require this pathname if it exists
  def require_if_exists
    require realpath.to_s if exist?
  end

  # just for fun, really
  alias_method :/, :+
end

def subclasses( base )
  classes = []
  ObjectSpace.each_object( Class ) do |x|
    if x.ancestors.include?( base )
      case
        when x == Clevic.base_entity_class; # don't include this
        else; classes << x
      end
    end
  end
  classes.sort{|a,b| a.name <=> b.name}
end

# do nothing ...
def maybe_load_rails_models
end

# ... unless this is included
# require 'clevic/rails_models_loader.rb'

def load_single_model_file( pathname )
  ( pathname + '.rb' ).require_if_exists
  pathname.require_if_exists
  ( pathname + '_models' ).require_if_exists
  ( pathname + '_models.rb' ).require_if_exists
end

def load_models( pathname )
  if pathname.directory?
    maybe_load_rails_models
  else
    # assume we have a single file, and try some variations
    load_single_model_file( pathname )
  end
end

begin
  Clevic::Browser.run( args )
rescue Exception => e
  puts e.message
  puts e.backtrace
end
